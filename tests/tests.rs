use sre_engine::engine;

struct Pattern {
    code: &'static [u32],
}

impl Pattern {
    fn state<'a, S: engine::StrDrive>(
        &self,
        string: S,
    ) -> (engine::Request<'a, S>, engine::State<S>) {
        let req = engine::Request::new(string, 0, usize::MAX, self.code, false);
        let state = engine::State::default();
        (req, state)
    }
}

#[test]
fn test_2427() {
    // pattern lookbehind = re.compile(r'(?<!\.)x\b')
    // START GENERATED by generate_tests.py
    #[rustfmt::skip] let lookbehind = Pattern { code: &[15, 4, 0, 1, 1, 5, 5, 1, 17, 46, 1, 17, 120, 6, 10, 1] };
    // END GENERATED
    let (req, mut state) = lookbehind.state("x");
    state.pymatch(req);
    assert!(state.has_matched);
}

#[test]
fn test_assert() {
    // pattern positive_lookbehind = re.compile(r'(?<=abc)def')
    // START GENERATED by generate_tests.py
    #[rustfmt::skip] let positive_lookbehind = Pattern { code: &[15, 4, 0, 3, 3, 4, 9, 3, 17, 97, 17, 98, 17, 99, 1, 17, 100, 17, 101, 17, 102, 1] };
    // END GENERATED
    let (req, mut state) = positive_lookbehind.state("abcdef");
    state.search(req);
    assert!(state.has_matched);
}

#[test]
fn test_string_boundaries() {
    // pattern big_b = re.compile(r'\B')
    // START GENERATED by generate_tests.py
    #[rustfmt::skip] let big_b = Pattern { code: &[15, 4, 0, 0, 0, 6, 11, 1] };
    // END GENERATED
    let (req, mut state) = big_b.state("");
    state.search(req);
    assert!(!state.has_matched);
}

#[test]
fn test_zerowidth() {
    // pattern p = re.compile(r'\b|:+')
    // START GENERATED by generate_tests.py
    #[rustfmt::skip] let p = Pattern { code: &[15, 4, 0, 0, 4294967295, 7, 5, 6, 10, 16, 12, 10, 25, 6, 1, 4294967295, 17, 58, 1, 16, 2, 0, 1] };
    // END GENERATED
    let (mut req, mut state) = p.state("a:");
    req.must_advance = true;
    state.search(req);
    assert_eq!(state.string_position, 1);
}

#[test]
fn test_repeat_context_panic() {
    use optional::Optioned;
    // pattern p = re.compile(r'(?:a*?(xx)??z)*')
    // START GENERATED by generate_tests.py
    #[rustfmt::skip] let p = Pattern { code: &[15, 4, 0, 0, 4294967295, 24, 25, 0, 4294967295, 27, 6, 0, 4294967295, 17, 97, 1, 24, 11, 0, 1, 18, 0, 17, 120, 17, 120, 18, 1, 20, 17, 122, 19, 1] };
    // END GENERATED
    let (req, mut state) = p.state("axxzaz");
    state.pymatch(req);
    assert_eq!(*state.marks, vec![Optioned::some(1), Optioned::some(3)]);
}

#[test]
fn test_double_max_until() {
    // pattern p = re.compile(r'((1)?)*')
    // START GENERATED by generate_tests.py
    #[rustfmt::skip] let p = Pattern { code: &[15, 4, 0, 0, 4294967295, 24, 18, 0, 4294967295, 18, 0, 24, 9, 0, 1, 18, 2, 17, 49, 18, 3, 19, 18, 1, 19, 1] };
    // END GENERATED
    let (req, mut state) = p.state("1111");
    state.pymatch(req);
    assert_eq!(state.string_position, 4);
}

#[test]
fn test_info_single() {
    // pattern p = re.compile(r'aa*')
    // START GENERATED by generate_tests.py
    #[rustfmt::skip] let p = Pattern { code: &[15, 8, 1, 1, 4294967295, 1, 1, 97, 0, 17, 97, 25, 6, 0, 4294967295, 17, 97, 1, 1] };
    // END GENERATED
    let (req, mut state) = p.state("baaaa");
    state.search(req);
    assert_eq!(state.start, 1);
    assert_eq!(state.string_position, 5);
}

#[test]
fn test_info_single2() {
    // pattern p = re.compile(r'Python|Perl')
    // START GENERATED by generate_tests.py
    #[rustfmt::skip] let p = Pattern { code: &[15, 8, 1, 4, 6, 1, 1, 80, 0, 17, 80, 7, 13, 17, 121, 17, 116, 17, 104, 17, 111, 17, 110, 16, 11, 9, 17, 101, 17, 114, 17, 108, 16, 2, 0, 1] };
    // END GENERATED
    let (req, mut state) = p.state("Perl");
    state.search(req);
    assert!(state.has_matched);
}

#[test]
fn test_info_literal() {
    // pattern p = re.compile(r'ababc+')
    // START GENERATED by generate_tests.py
    #[rustfmt::skip] let p = Pattern { code: &[15, 14, 1, 5, 4294967295, 4, 4, 97, 98, 97, 98, 0, 0, 1, 2, 17, 97, 17, 98, 17, 97, 17, 98, 25, 6, 1, 4294967295, 17, 99, 1, 1] };
    // END GENERATED
    let (req, mut state) = p.state("!ababc");
    state.search(req);
    assert!(state.has_matched);
}

#[test]
fn test_info_literal2() {
    // pattern p = re.compile(r'(python)\1')
    // START GENERATED by generate_tests.py
    #[rustfmt::skip] let p = Pattern { code: &[15, 18, 1, 12, 12, 6, 0, 112, 121, 116, 104, 111, 110, 0, 0, 0, 0, 0, 0, 18, 0, 17, 112, 17, 121, 17, 116, 17, 104, 17, 111, 17, 110, 18, 1, 12, 0, 1] };
    // END GENERATED
    let (req, mut state) = p.state("pythonpython");
    state.search(req);
    assert!(state.has_matched);
}
